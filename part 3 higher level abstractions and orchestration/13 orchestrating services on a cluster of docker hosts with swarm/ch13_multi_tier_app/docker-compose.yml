# Docker Compose file reference: https://docs.docker.com/compose/compose-file/
version: '3.7'

# When using a Docker overlay network,
# applications connected to a given network will be able to communicate with each other on any port.
# No firewalls exist between applications attached to a Docker network.
networks:
  public:
    driver: overlay
    driver_opts:
      encrypted: 'true'
  private:
    driver: overlay
    driver_opts:
      encrypted: 'true'
    # can attach our shell container
    attachable: true

# Swarm will use Docker’s built-in local volume driver to create it.
# The volume will be local to that Swarm node and not replicated, backed up, or shared elsewhere.
volumes:
  db-data:

# Used by the API to access the PostgreSQL database
secrets:
  ch13_multi_tier_app-POSTGRES_PASSWORD:
    # external means defined outside the application deployment definition and provided by Swarm
    external: true

services:
  postgres:
    image: postgres:9.6.6
    networks:
      - private
    volumes:
      - db-data:/var/lib/postgresql/data
    # Injects PostgreSQL password from a cluster-managed secret
    secrets:
      - source: ch13_multi_tier_app-POSTGRES_PASSWORD
        # Swarm places the secret’s value in a file mounted into
        # the container at /run/secrets/POSTGRES_PASSWORD.
        # controlled by file permissions.
        # So nobody can read a $SECRET environment variable,
        # but not the /run/secrets/SECRET file unless file ownership
        # and permissions permit reading by nobody.
        target: POSTGRES_PASSWORD
        # note: the postgres user (uid: 999) managed by the container needs to read the file
        uid: '999'
        gid: '999'
        mode: 0400
    environment:
      POSTGRES_USER: 'exercise'
      POSTGRES_PASSWORD_FILE: '/run/secrets/POSTGRES_PASSWORD'
      POSTGRES_DB: 'exercise'
    deploy:
      # ensure at most a single instance of postgres is running by
      # deploying a single replica and use 'stop-first' update and rollback strategy
      replicas: 1
      update_config:
        order: 'stop-first'
      rollback_config:
        order: 'stop-first'
      resources:
        limits:
          cpus: '1.00'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 50M
  api:
    image: ${IMAGE_REPOSITORY:-dockerinaction/ch13_multi_tier_app}:api
    networks:
      - public
      - private
    ports:
      - '8080:80'
      # https://docs.docker.com/compose/compose-file/#long-syntax-1
      #- target: 80
      #  published: 8080
      #  protocol: tcp
      #  mode: ingress
    secrets:
      - source: ch13_multi_tier_app-POSTGRES_PASSWORD
        target: POSTGRES_PASSWORD
        mode: 0400
    # the api server is configured with the name of the database service via the POSTGRES_HOST environment variable
    environment:
      POSTGRES_HOST: 'postgres'
      POSTGRES_PORT: '5432'
      POSTGRES_USER: 'exercise'
      POSTGRES_DB: 'exercise'
      POSTGRES_PASSWORD_FILE: '/run/secrets/POSTGRES_PASSWORD'
      # uncomment to print debugging statements.
      # note: will print DB connection info to stdout/logs, including password
      # DEBUG: 'true'
    depends_on:
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 10
        delay: 5s
      update_config:
        parallelism: 1
        delay: 5s
      resources:
        limits:
          cpus: '0.50'
          memory: 15M
        reservations:
          cpus: '0.25'
          memory: 15M
